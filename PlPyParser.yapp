%{  my %symtab;
    my %printab;
    my %imports;
    my @print_vars;
    my @py_header;
    my @py_code; %}
%token NUMBER
%token SHEBANG
%token PRINT
%token END_OF_FILE
%token COMMENT
%token EMPTY_LINE
%token WHITESPACE
%token WORD
%token QUOTE
%token SEPARATOR
%token IF
%token NO_LINE
%token GTE
%token LTE
%token CHOMP
%token JOIN
%token EXIT
%token CREMENT
%left '-' '+'
%left '*' '/' '%'
%left '<' '>'
%left RANGE

%%

program     : line '\n'
            | program line '\n'
            ;

line        : statement
                {
                    my $s = $_[1];
                    $s =~ s{\$}{}g;
                    # print "$s\n";
                    push @py_code, "$s\n";
                    do_imports($s);
                }
            | COMMENT { push @py_code, "$_[1]\n"; }
            | EMPTY_LINE { push @py_code, "\n"; }
            | END_OF_FILE
                {
                    print_py();
                    exit 0;
                }
            | SHEBANG { push @py_header, "#!/usr/local/bin/python3.5 -u\n"; }
            | UNKNOWN_TOK { push @py_code, "# $_[1]\n"; }
            | NO_LINE
            ;

statement   : print_st
            | assignment
            | condition
            | loop
            | chomp
            | string_func
            | EXIT { return "sys.exit"; }
            | LAST { return "break"; }
            | NEXT { return "continue"; }
            | WHITESPACE statement { return join('', $_[1], $_[2]); }
            ;

string_func : JOIN '(' string SEPARATOR var ')'
                {
                    # print "woo\n";
                    # print "$_[3].join($_[4])";
                    return "$_[3].join($_[5])";
                }
            ;

print_st    : PRINT print_arg
                {
                    my $print_tok = $_[1];
                    my $args = $_[2];
                    return handle_print($print_tok, $args);
                }
            ;

print_arg   : expr
            | string_func
            | print_arg SEPARATOR expr { "$_[1], $_[3]"; }
            ;

str_content : SENTENCE
            | NEW_LINE
            | var
            | str_content NEW_LINE { return "$_[1]$_[2]"; }
            | str_content SENTENCE
            | str_content var
            ;

string      : EMPTY_STRING { return "$_[1]"; }
            | QUOTE str_content QUOTE { return "$_[1]$_[2]$_[3]"}
            ;

var         : VAR { return handle_var($_[1]); }
            # | VAR_SYMBOL WORD index { return handle_var($_[2]); }
            ;

assignment  : var '=' expr
                {
                    return handle_assignment($_[1], $_[3]);
                }
            | var CREMENT
                {
                    return handle_crement($_[1], $_[2]);
                }
            | var '=' read_op { return "$_[1] $_[2] $_[3]"; }
            ;

read_op     : STDIN
                {
                    my $read_op = $_[1];
                    return handle_read_op($read_op);
                }
            ;

condition   : IF '(' truth ')' '{' { "$_[1] $_[3]:" }
            ;

expr        : expr '+' expr { "$_[1] + $_[3]" }
            | expr '-' expr { "$_[1] - $_[3]" }
            | expr '*' expr { "$_[1] * $_[3]" }
            | expr '/' expr { "$_[1] / $_[3]" }
            | expr '%' expr { "$_[1] % $_[3]" }
            | expr RANGE expr
                {
                    my $start = $_[1];
                    my $end = $_[3];
                    return handle_range($start, $end);
                }
            | var
            | string
            | NUMBER
            ;

truth       : expr '>' expr { "$_[1] > $_[3]" }
            | expr '<' expr { "$_[1] < $_[3]" }
            | expr GTE expr { "$_[1] >= $_[3]" }
            | expr LTE expr { "$_[1] <= $_[3]" }
            | expr EQUAL expr { "$_[1] == $_[3]" }
            | expr NOT_EQUAL expr { "$_[1] != $_[3]" }
            | expr
            ;

loop        : LOOP_TYPE '(' truth ')' '{' { "$_[1] $_[3]:" }
            | LOOP_TYPE var '(' expr ')' '{'
                {
                    my $iterator = $_[2];
                    my $iterable = $_[4];
                    "for $iterator in $iterable:";
                }
            ;

chomp       : CHOMP #TODO
            | chomp var
                {
                    my $var = $_[2];
                    return handle_chomp($var);
                }
            ;
%%

use constant {
    _INT => "%d",
    _FLOAT => "%f",
    _STRING => "%s",
};

sub print_py {
    my @modules;
    foreach my $module (keys %imports ){
        push @modules, $module;
    }
    if (scalar @modules > 0) {
        push (@py_header, (join('', "import ", join(', ', @modules)) . "\n"));
    }
    push my @py_program, (@py_header, @py_code);
    for (@py_program) {
        print "$_";
    }
}

sub handle_print {
    my $print_tok = $_[0];
    my $arg = $_[1];
    my $has_new_line = 0;
    # remove only trailing new lines
    # i.e. print "Hello\nWorld"; is passable
    if ($arg =~ m{\\n"\s*$}) {
        $has_new_line = 1;
        $arg =~ s{,\s*"\\n"\s*$}{}g; # remove , "\n"
        $arg =~ s{\\n\s*"\s*$}{"}g; # remove  \n in \n"
    }

    # vars that don't need type inference
    if ($arg =~ /^([^"]*)$/ || $arg =~ /^"?\$([^\s\"]*)"?$/) {
        $arg = $1;
        $arg =~ s{\$}{}g;
    } else {
        my @components = split(/\s+/, $arg);
        my @vars;
        foreach my $component (@components) {
            if ($component =~ /\$\w+/) {
                my $replace = infer_var_type($component);
                $component =~ s{\$(\w+)}{$replace}g;
                push @vars, $1;
            }
        }
        $arg = join(' ', @components);
        if (@vars) {
            my @str_format = join(', ', @vars);
            if (scalar @vars > 1) {
                $arg .= " % (@str_format)";
            } else {
                $arg .= " % @str_format";
            }
        }
    }

    if ($has_new_line == 0) {
        $arg .= ", end=\"\"";
    }
    return "$print_tok($arg)";
}

sub infer_var_type {
    my ($var) = @_;
    return (exists $symtab{$var} && $symtab{$var} =~ m{^\d+$} ? _INT : _STRING);
}

sub handle_read_op {
    my $read_op = $_[0];
    if ($read_op eq "STDIN") {
        return "sys.stdin.readline()";
    }
    return "$read_op";
}

sub handle_chomp {
    my $var = $_[0];
    return "$var = $var.rstrip()";
}

sub handle_var {
    my $var = $_[0];
    if ($var eq "ARGV") {
        return "sys.argv[1:]"
    }
    return "$var";
}

sub handle_crement {
    my ($var, $crement) = @_;
    my $expr = "$var - 1";
    if ($crement eq "+") {
        $expr = "$var + 1";
    }
    return handle_assignment($var, $expr);
}

sub handle_assignment {
    my ($var, $expr) = @_;
    $symtab{$var} = $expr;
    return "$var = $expr";
}

sub handle_range {
    my ($start, $end) = @_;
    # evaluate end+1 if it's only a number, otherwise leave it as a string
    $end = ($end =~ m{^\d+$} ? $end+1 : "$end+1");
    "range($start, $end)" ;
}

sub do_imports {
    my $line = $_[0];
    if ($line =~ m{(sys|fileinput|re)\.}) {
        unless (exists $imports{$1} && $imports{$1} == 1) {
            $imports{$1} = 1;
        }
    }
}