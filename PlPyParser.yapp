%{  my %symtab;
    my %sym_type_tab;
    my %printab;
    my %imports;
    my %last_assignment;
    my @print_vars;
    my @py_header;
    my @py_code;
    my $curr_line_num; %}
%token NUMBER
%token SHEBANG
%token PRINT
%token END_OF_FILE
%token COMMENT
%token EMPTY_LINE
%token WHITESPACE
%token SEPARATOR
%token IF
%token NO_LINE
%token GTE
%token LTE
%token CHOMP
%token JOIN
%token EXIT
%token CREMENT
%left '-' '+'
%left '*' '/' '%'
%left '<' '>'
%left RANGE

%%

program     : line '\n'
            | program line '\n'
            ;

line        : statement
                {
                    my $stmt = $_[1];
                    # TODO: gross hacky
                    $stmt =~ s{[\$@]}{}g;
                    # print "$stmt\n";
                    push @py_code, "$stmt\n";
                    $curr_line_num = scalar @py_code;
                    do_imports($stmt);
                }
            | COMMENT { push @py_code, "$_[1]\n"; }
            | EMPTY_LINE { push @py_code, "\n"; }
            | END_OF_FILE
                {
                    print_py();
                    exit 0;
                }
            | SHEBANG { push @py_header, "#!/usr/local/bin/python3.5 -u\n"; }
            | UNKNOWN_TOK { push @py_code, "# $_[1]\n"; }
            | no_line #no need to push anything
            ;

no_line     : '}'
            | WHITESPACE no_line
            ;

statement   : print_st
            | assignment
            | condition
            | loop
            | chomp
            | string_func
            | read_op
            | regex
            | EXIT { return "sys.exit"; }
            | LAST { return "break"; }
            | NEXT { return "continue"; }
            | WHITESPACE statement { return join('', $_[1], $_[2]); }
            ;

regex       : var MATCH_OPERATOR MATCH
            | var MATCH_OPERATOR SUBS { return handle_re($_[1], $_[3]); }
            ;

string_func : JOIN '(' string SEPARATOR expr ')'
                {
                    return "$_[3].join($_[5])";
                }
            | SPLIT '(' MATCH SEPARATOR expr ')'
                {
                    return "$_[5].split('$_[3]')";
                }
            ;

print_st    : PRINT print_arg
                {
                    my $args = $_[2];
                    return handle_print($args);
                }
            ;

print_arg   : expr
            | string_func
            | print_arg SEPARATOR string_func
            | print_arg SEPARATOR expr { "$_[1], $_[3]"; }
            ;

string      : EMPTY_STRING
            | SENTENCE
            ;

assignment  : var '=' expr
                {
                    return handle_assignment($_[1], $_[3]);
                }
            | var '=' input
                {
                    return handle_assignment($_[1], $_[3]);
                }
            | var CREMENT
                {
                    return handle_crement($_[1], $_[2]);
                }
            ;

input       : INPUT
                {
                    my $read_op = $_[1];
                    return handle_read_op($read_op);
                }
            ;

condition   : IF '(' truth ')' '{'
                {
                    return handle_conditional($_[1], $_[3]);
                    # "if $_[3]:"
                }
            | '}' ELSIF '(' truth ')' '{'
                {
                    return handle_conditional($_[2], $_[4]);
                    # "elif $_[4]:"
                }
            | '}' ELSE '{' { "else:"; }
            ;

expr        : expr '+' expr { "$_[1] + $_[3]" }
            | expr '-' expr { "$_[1] - $_[3]" }
            | expr '*' expr { "$_[1] * $_[3]" }
            | expr '/' expr { "$_[1] / $_[3]" }
            | expr '%' expr { "$_[1] % $_[3]" }
            |
            | expr RANGE expr
                {
                    my $start = $_[1];
                    my $end = $_[3];
                    return handle_range($start, $end);
                }
            | var
            | string
            | NUMBER
            ;

truth       : expr '>' expr { "$_[1] > $_[3]" }
            | expr '<' expr { "$_[1] < $_[3]" }
            | expr GTE expr { "$_[1] >= $_[3]" }
            | expr LTE expr { "$_[1] <= $_[3]" }
            | expr EQ expr {"$_[1] $_[2] $_[3]" } # can be string or num
            | expr NE expr { "$_[1] $_[2] $_[3]" }
            | expr AND expr { "$_[1] and $_[3]" }
            | expr OR expr { "$_[1] or $_[3]" }
            | expr
            ;

loop        : LOOP_TYPE '(' truth ')' '{' { "$_[1] $_[3]:" }
            | LOOP_TYPE var '(' expr ')' '{'
                {
                    my $iterator = $_[2];
                    my $iterable = $_[4];
                    "for $iterator in $iterable:";
                }
            | LOOP_TYPE '(' assignment ')' '{' # var = read_op
                {
                    my $assn = $_[3];
                    return handle_input_loop($assn);
                }
            ;

chomp       : CHOMP #TODO
            | chomp var
                {
                    my $var = $_[2];
                    return handle_chomp($var);
                }
            ;

var         : VAR { return handle_var($_[1]); }
            | VAR INDEX
            ;
%%

use constant {
    _INT => "int",
    _FLOAT => "float",
    _STRING => "str",
};

my %syntax_lookup = (
    "<STDIN>" => "sys.stdin.readline()",
    "<>" => "fileinput.input()",
    "\@ARGV" => "sys.argv[1:]",
    "\$#ARGV" => "len(sys.argv) - 1", # $#ARGV is the last index, len is the
);

sub print_py {
    my @modules;
    foreach my $module (keys %imports ){
        push @modules, $module;
    }
    if (scalar @modules > 0) {
        push (@py_header, (join('', "import ", join(', ', @modules)) . "\n"));
    }
    push my @py_program, (@py_header, @py_code);
    for (@py_program) {
        print "$_";
    }
}

sub handle_print {
    my ($arg) = @_;
    my $has_new_line = 0;

    # remove only trailing new lines
    # i.e. print "Hello\nWorld"; is passable
    if ($arg =~ m{\\n"\s*$}) {
        $has_new_line = 1;
        $arg =~ s{,\s*"\\n"\s*$}{}g; # remove , "\n"
        $arg =~ s{\\n\s*"\s*$}{"}g; # remove  \n in \n"
    }

    # vars that don't need type inference
    # print ($var) || print ""
    if ($arg =~ /^([^"]*)$/ || $arg =~ /^"?(\$[^\s\"]*)"?$/) {
        $arg = handle_var($1);
        $arg =~ s{\$}{}g;
    } else {
        my @components = split(/\s+/, $arg);
        my @vars;
        foreach my $component (@components) {
            if ($component =~ /(\$\w+)/) {
                my $replace = "%s";
                my $type = $sym_type_tab{$1};
                if ($type eq _INT) {
                    $replace = "%d";
                } elsif ($type eq _FLOAT) {
                    $replace = "%f";
                }
                $component =~ s{\$(\w+)}{$replace}g;
                push @vars, $1;
            }
        }
        $arg = join(' ', @components);
        if (@vars) {
            my @str_format = join(', ', @vars);
            if (scalar @vars > 1) {
                $arg .= " % (@str_format)";
            } else {
                $arg .= " % @str_format";
            }
        }
    }

    if ($has_new_line == 0) {
        $arg .= ", end=\"\"";
    }
    return "print($arg)";
}

sub infer_type {
    my ($var) = @_;
    if (exists $symtab{$var}) {
        if ($symtab{$var} =~ m{^\d+$}) {
            return _INT;
        } elsif ($symtab{$var} =~ m{^\d*\.\d+$}) {
            return _FLOAT;
        }
    } elsif ($var =~ m{^\d+$}) {
        return _INT;
    }
    return _STRING;
}

sub handle_read_op {
    my $read_op = $_[0];
    if (exists $syntax_lookup{"<$read_op>"}) {
        return $syntax_lookup{"<$read_op>"};
    }
    return "$read_op";
}

sub handle_chomp {
    my $var = $_[0];
    return "$var = $var.rstrip()";
}

sub handle_var {
    my $var = $_[0];
    for my $pl_syntax (keys %syntax_lookup) {
        return $syntax_lookup{$pl_syntax} if $var =~ m{\Q$pl_syntax};
    }
    if ($var =~ m{\$ARGV\[(.*)\]}) {
        return "sys.argv[$1 + 1]"; #move over as in py, argv[0] is filename
    }
    return "$var";
}

sub handle_crement {
    my ($var, $crement) = @_;
    my $expr = "$var - 1";
    if ($crement eq "+") {
        $expr = "$var + 1";
    }
    return handle_assignment($var, $expr);
}

sub handle_assignment {
    my ($var, $expr) = @_;
    $symtab{$var} = $expr;
    $sym_type_tab{$var} = infer_type($var);
    $last_assignment{$var} = $curr_line_num;
    return "$var = $expr";
}

sub handle_range {
    my ($start, $end) = @_;
    # evaluate end+1 if it's only a number, otherwise leave it as a string
    if ($start == 0 && $end =~ m{len\(sys\.argv\)\s*\-\s*1}) {
        $end = "len(sys.argv) - 1";
    } else {
        if ($end =~ m{(-+)?\s*\b(\d+)\b}) {
            my $operator = $1;
            my $num = $2;
            if ($operator && $operator eq "-") {
                $end =~ s{$num}{$num-1}e;
            } else {
                $end =~ s{$num}{$num+1}e;
            }
        } else {
            $end = "$end + 1";
        }
    }

    return "range($start, $end)" ;
}

sub handle_input_loop {
    my ($assn) = @_;
    my @components = split(/\s+/, $assn);
    my $iterator = $components[0];
    my $iterable = $components[2];
    if ($iterable =~ m{\Q$syntax_lookup{"<STDIN>"}}) {
        # since this is already a line by line loop, remove readline()
        $iterable =~ s{\.readline\(\)}{};
    }
    return "for $iterator in $iterable:";
}

sub handle_re {
    my ($var, $re) = @_;
    if ($re =~ m{s/(.*)/(.*)/}) {
        return "$var = re.sub(r'$1', '$2', $var)";
    }
    ### TODO: re match
    return "$var = re.match(r'$1', $var)";
}

sub handle_conditional {
    my ($type, $truth) = @_;
    $type =~ s{elsif}{elif};
    my @truth_exprs = split(/\s(<=|>=|>|<|==|!=|eq|ne|and|or)\s/, $truth);
    if ($truth_exprs[0] =~ m{^\$\w+}) {
        if ($sym_type_tab{$truth_exprs[0]} eq _STRING && infer_type($truth_exprs
            [2]) ne _STRING) {
            cast_assignment($truth_exprs[0], _FLOAT);
        }
    }
    return ("$type $truth:");
}

sub cast_assignment {
    my ($var, $typecast) = @_;
    my $assn = $py_code[$last_assignment{$var}];
    my @components = split(/\s=\s/, $assn);
    my $cast_value = chomp $components[1];

    # update type for this var
    $sym_type_tab{$var} = $typecast;

    # now add the cast to the existing line and remove the $
    my $var_str = $var;
    $var_str =~ s{\$}{};
    $assn = "$var_str = $typecast($components[1])\n";
    $py_code[$last_assignment{$var}] = "$assn";
}

sub do_imports {
    my $line = $_[0];
    if ($line =~ m{(sys|fileinput|re)\.}) {
        unless (exists $imports{$1} && $imports{$1} == 1) {
            $imports{$1} = 1;
        }
    }
}