# This PlPyParser.yapp file is used by yapp to generate
# a Perl module, PlPyParser.pm

########################################
##########       HEADER       ##########
########################################
# Variables used within the parser's actions
# Placed here for visibility
%{  my @py_header;
    my @py_code;
    my $curr_line_num = 0; %}

# Left associative operators
%left MATH_OP
%left BW_BINARY_OP
%left BW_UNARY_OP
%left RANGE

# Tokens/terminals are indicated by CAPITALS
# and are the smallest meaningful unit returned to the
# parser by the lexer in plpy.pl.

#########################################
##########   GRAMMAR  RULES    ##########
#########################################
# Yapp compiles these grammar rules into the corresponding
# Perl in generated perl module
%%

program     : line '\n'
            | line endfile
            | program endfile
            | program line '\n'
            | program line endfile
            ;

endfile     : END_OF_FILE
                {
                    print_py();
                    exit 0;
                }
            ;

line        : statement
                {
                    my $stmt = $_[1];
                    $stmt = do_imports_and_clean_vars($stmt);
                    push @py_code, "$stmt\n";
                    $curr_line_num = scalar @py_code;
                }
            | comment {
                push @py_code, "$_[1]\n";
                $curr_line_num = scalar @py_code;
            }
            | EMPTY_LINE {
                push @py_code, "\n";
                $curr_line_num = scalar @py_code;
            }
            | SHEBANG {
                push @py_header, "#!/usr/local/bin/python3.5 -u\n";
                $curr_line_num = scalar @py_code;
            }
            | UNKNOWN_TOK {
                push @py_code, "\n# $_[1]\n";
                $curr_line_num = scalar @py_code;
            }
            | no_line
                # e.g. a solitary closing '}' in Perl will translate
                # to nothing, so there is no need to push anything
            ;

# Most meaningful rules will resolve to a statement
# and return a formatted string
statement   : print_st | assignment | condition | loop
            | chomp | string_func | read_op | re_match
            | list_func
            | OPENF SEPARATOR string
                    {
                        handle_open($_[1], $_[3]);
                    }
            | EXIT { "sys.exit()"; }
            | LAST { "break"; }
            | NEXT { "continue"; }
            | WHITESPACE statement { join('', $_[1], $_[2]); }
            ;

loop        : LOOP_TYPE '(' truth ')' '{' { handle_truth($_[1], $_[3]); }
            | LOOP_TYPE var '(' expr ')' '{' { handle_loop($_[2], $_[4]);
            }
            | LOOP_TYPE '(' assignment ')' '{'
                {
                    my $assn = $_[3];
                    handle_input_loop($assn);
                }
            ;

chomp       : CHOMP
            | CHOMP var { handle_chomp($_[2]); }
            ;

string_func : JOIN '(' string SEPARATOR join_expr ')' { "$_[3].join($_[5])"; }
            | JOIN string SEPARATOR join_expr { "$_[2].join($_[4])"; }
            | SPLIT MATCH SEPARATOR value
                {
                    my $regex = $_[2];
                    $regex =~ tr/\//'/;
                    "$_[4].split($regex)";
                }
            | SPLIT '(' MATCH SEPARATOR value ')'
                {
                    my $regex = $_[3];
                    $regex =~ tr/\//'/;
                    "$_[5].split($regex)";
                }
            ;

join_expr   : '(' list ')'
            | value
            | string_func
            ;

print_st    : PRINT print_arg { handle_print($_[1], $_[2]); }
            | EXIT print_arg { handle_print($_[1], $_[2]); }
            ;

print_arg   : expr
            | string_func
            | print_arg SEPARATOR expr { "$_[1], $_[3]"; }
            ;


string      : EMPTY_STRING
            | SENTENCE
            | value CONCAT value { handle_concat($_[1], $_
                [2], $_[3]); }
            ;

list_func   : PUSH '(' var SEPARATOR '(' list ')' ')'
                    { handle_list_func($_[1], $_[3], $_[6]); }
            | PUSH '(' var SEPARATOR value ')'
                    { handle_list_func($_[1], $_[3], $_[5]); }
            | PUSH var SEPARATOR '(' list ')'
                    { handle_list_func($_[1], $_[2], $_[5]); }
            | PUSH var SEPARATOR value
                    { handle_list_func($_[1], $_[2], $_[4]); }
            | POP '(' var ')' { handle_list_func($_[1], $_[3], undef); }
            | POP var { handle_list_func($_[1], $_[2], undef); }
            | UNSHIFT '(' var SEPARATOR '(' list ')' ')'
                    { handle_list_func($_[1], $_[3], $_[6]); }
            | UNSHIFT '(' var SEPARATOR value ')'
                    { handle_list_func($_[1], $_[3], $_[5]); }
            | UNSHIFT var SEPARATOR '(' list ')'
                    { handle_list_func($_[1], $_[2], $_[5]); }
            | UNSHIFT var SEPARATOR value
                    { handle_list_func($_[1], $_[2], $_[4]); }
            | SHIFT '(' var ')'
                    { handle_list_func($_[1], $_[3], undef); }
            | SHIFT var
                    { handle_list_func($_[1], $_[2], undef); }
            | REVERSE '(' var ')' { handle_list_func($_[1], $_[3], undef); }
            | REVERSE var { handle_list_func($_[1], $_[2], undef); }
            ;

expr        : expr MATH_OP expr { "$_[1] $_[2] $_[3]" }
            | expr BW_BINARY_OP expr { "$_[1] $_[2] $_[3]" }
            | BW_UNARY_OP expr { "$_[1]$_[2]" }
            | expr RANGE expr
                {
                    my $start = $_[1];
                    my $end = $_[3];
                    handle_range($start, $end);
                }
            | value
            ;

value       : NUMBER
            | string
            | LEN var { "len($_[2])" }
            | KEYS var { "$_[2].keys()" }
            | var
            ;

assignment  : var '=' expr
                { handle_assignment($_[1], $_[2], $_[3]); }
            | var '=' input
                { handle_assignment($_[1], $_[2], $_[3]); }
            | var '=' '(' list ')'
                { handle_assignment($_[1], $_[2], $_[4]); }
            | var '=' '(' '\n' hash ')'
                { handle_assignment($_[1], $_[2], $_[5]); }
            | var '=' '(' ')'
                { handle_assignment($_[1], $_[2], ""); }
            | var '=' string_func
                { handle_assignment($_[1], $_[2], $_[3]); }
            | var SHORT_MATH value
                { handle_assignment($_[1], $_[2], $_[3]); }
            | var CONCAT_EQ value
                { handle_concat($_[1], $_[2], $_[3]); }
            | var CREMENT
                { handle_crement($_[1], $_[2]); }
            ;

input       : INPUT
                { handle_read_op($_[1]); }
            ;

condition   : IF '(' truth ')' '{'
                { handle_truth($_[1], $_[3]); }
            | '}' ELSIF '(' truth ')' '{'
                { handle_truth($_[2], $_[4]); }
            | '}' ELSE '{' { "else:"; }
            ;

truth_op    : LOG_OP
            | COMP_OP
            ;

truth       : expr
            | re_match
            | truth truth_op truth
                { handle_truth_op($_[1], $_[2], $_[3]); }
            | '(' truth ')' { "($_[2])" }
            | NOT truth { "not $_[2]" }
            ;

regex       : MATCH
            | SUBS
            ;

re_match    : var MATCH_OP regex { handle_re($_[1], $_[2], $_[3]); }
            ;

hash_line   : WHITESPACE value SEPARATOR value SEPARATOR '\n'
                { "$_[2]: $_[4]";}
            | WHITESPACE value '=>' value SEPARATOR '\n'
                { "$_[2]: $_[4]" }
            ;

list        : value { "$_[1]"; }
            | value SEPARATOR { "$_[1]$_[2]"; }
            | list value { "$_[1]$_[2]"; }
            | list value SEPARATOR { "$_[1]$_[2]$_[3]"; }
            ;

hash        : hash_line
            | hash hash_line { "$_[1], $_[2]";}
            ;

var         : VAR { handle_var($_[1]); }
            | MY VAR { handle_var($_[2]); }
            ;

# Lines with little functional effect
comment     : COMMENT
            | WHITESPACE comment { "$_[1]$_[2]"; }
            ;

no_line     : '}'
            | WHITESPACE no_line
            ;

%%

#########################################
##########       FOOTER        ##########
#########################################

# hash tables used for the below subroutines
my %sym_tab;
my %sym_type_tab;
my %import_tab;
my %last_assignment_tab;

# These subroutines are used for manipulating
# and reproducing python lines from perl lines

# Some of them handle tokens, for example vars,
# and return a reformatted token which may later
# be used again by another handler

# E.g. given the line "my $args = @ARGV;"
# 1) 'my' is ignored
# 2) $args => $args through handle_var
# 3) @ARGV => sys.argv[1:] through handle_var
#   2) and 3) are returned to handle_assignment
# 4)       ==> $args = sys.argv[1:] through handle_assignment

# constants used for keeping track of var types
# used mostly for typecasting

use constant {
    _INT => "int",
    _FLOAT => "float",
    _STRING => "str",
};

my %syntax_lookup = (
    "<STDIN>" => "sys.stdin.readline()",
    "<>" => "fileinput.input()",
    "\@ARGV" => "sys.argv[1:]",
    "\$#ARGV" => "len(sys.argv) - 1",
    "\$0" => "sys.argv[0]",
);


# When EOF is reached, print Python code
sub print_py {
    my @modules;
    # first prepend the modules as a single import header
    foreach my $module (keys %import_tab ){
        push @modules, $module;
    }
    if (scalar @modules > 0) {
        push (@py_header, (join('', "import ", join(', ', @modules)) . "\n"));
    }
    push my @py_program, (@py_header, @py_code);
    for (@py_program) {
        print "$_";
    }
}



sub handle_print {
    my ($print_tok, $arg) = @_;
    my $has_new_line = 0;

    # PRINT
    if ($print_tok eq "print") {
        # remove only trailing new lines
        # i.e. print "Hello\nWorld"; is passable
        if ($arg =~ m{\\n"\s*$}) {
            $has_new_line = 1;
            $arg =~ s{,\s*"\\n"\s*$}{}g; # remove , "\n"
            $arg =~ s{\\n\s*"\s*$}{"}g; # remove  \n in \n"
        }

        # split by CONCATENATE operator
        my @strings = split(/\s+\+\s+/, $arg);
        for my $string (@strings) {
            # a dirty dirty hack
            if ($string =~ m{(\$ARGV\[.*\])}) {
                $string = handle_var($1);
                $string =~ s{^"}{}g;
                $string =~ s{"$}{}g;
            # simple lone vars
            # E.g. print ($var) ==> print var
            #      print "$var" ==> print var
            } elsif ($string =~ m{^\(?([^"]*)(\[.*\])?\)?$} || $string =~ m{^"?
                (\$\w+)(\[.*\])?"?$}) {
                my $original_var = $1;
                my $var_replace = handle_var($original_var);
                $string =~ s{$original_var}{$var_replace}e;
                if (exists $sym_type_tab{$original_var} && $sym_type_tab{$original_var} ne _STRING) {
                    my $cast_replace = "str($var_replace)";
                    $string =~ s{\Q$var_replace}{$cast_replace}e;
                }
                $string =~ s{^"}{}g;
                $string =~ s{"$}{}g;
            # strings with vars and words
            # E.g. print "$num bats"
            } else {
                # iterate and test if this is a string that needs formatting
                # E.g. "Aardvark $b $c Dog\n" => "Aardvark %s %s Dog"
                my @components = split(/\s+/, $string);
                # to store modified components in
                my @new_components = ();
                my @vars;
                foreach my $component (@components) {
                    # format any var components
                    if ($component =~ m{(\$\w+([\[\{].*[\]\}])?)}) {
                        my $replace = "%s";
                        if (exists $sym_type_tab{$1}) {
                            my $type = $sym_type_tab{$1};
                            if ($type eq _INT) {
                                $replace = "%d";
                            } elsif ($type eq _FLOAT) {
                                $replace = "%f";
                            }
                        }
                        my $var = handle_var($1);
                        $var =~ tr/{}/[]/;
                        $component =~ s{(\$\w+([\[\{].*[\]\}])?)}{$replace}g;
                        push @vars, $var;
                    }
                }
                $string = join(' ', @components);
                if (@vars) {
                    my @str_format = join(', ', @vars);
                    if (scalar @vars > 1) {
                        $string .= " % (@str_format)";
                    } else {
                        $string .= " % @str_format";
                    }
                }
            }
        }
        $arg = join(' + ', @strings);
        # trim any empty strings
        $arg =~ s{\s*\+\s*""}{}g;
    # PRINTF (very similar to Python, minimal change)
    } elsif ($print_tok eq "printf") {
        if ($arg =~ m{\\n"\s*}) {
            $has_new_line = 1;
            $arg =~ s{,\s*"\\n"\s*$}{}g; # remove , "\n"
            $arg =~ s{\\n\s*"\s*$}{"}g; # remove  \n in \n"
        }
        # insert % to indicate the format vars
        $arg =~ s{",\s*}{" % };
    # DIE has an option to provide a message, so
    # just turn this into an exit statement
    # and a print statement
    } elsif ($print_tok eq "die") {
        # deduce the indentation based off a previous line...
        my $whitespace = "";
        if ($py_code[$curr_line_num-1] =~ m{(^\s*).}) {
            $whitespace .= $1;
            if ($py_code[$curr_line_num-1] =~ m{:$}) {
                $whitespace .= "    ";
            }
        }
        return "print($arg)\n${whitespace}sys.exit()";
    }
    if ($has_new_line == 0) {
        $arg .= ", end=\"\"";
    }
    # prevent the issue of a prompt not being written to
    # STDOUT before reading STDIN
    $arg .= ", flush=True";
    return "print($arg)";
}


# Used during initial assignment, but also when a variable
# is used in a truth so we can find out whether or not we
# should have cast the variable in order to avoid Python
# specific errors
sub infer_type {
    my ($var) = @_;
    if (exists $sym_tab{$var}) {
        # this var is assigned to ANOTHER var, so check that type
        if ($sym_tab{$var} =~ m{(\$\w+)}) {
            if (exists $sym_type_tab{$1}) {
                return $sym_type_tab{$1};
            }
        }
        if ($sym_tab{$var} =~ m{^\d+$}) {
            return _INT;
        } elsif ($sym_tab{$var} =~ m{^\d*\.\d+$}) {
            return _FLOAT;
        }
    } elsif ($var =~ m{^\d+$} || $var =~ m{^\$\#}) {
        return _INT;
    }
    return _STRING;
}


# <STDIN>, <>
sub handle_read_op {
    my ($read_op) = @_;
    if (exists $syntax_lookup{"<$read_op>"}) {
        return $syntax_lookup{"<$read_op>"};
    }
    return "$read_op";
}


# Only handles chomp $var
sub handle_chomp {
    my ($var) = @_;
    return "$var = $var.rstrip()";
}


sub handle_loop {
    my ($iterator, $iterable) = @_;
    return "for $iterator in $iterable:";
}


# Does substitutions for variables that have a direct
# translation in Python
sub handle_var {
    my $var = $_[0];
    for my $pl_syntax (keys %syntax_lookup) {
        return $syntax_lookup{$pl_syntax} if $var =~ m{\Q$pl_syntax};
    }
    if ($var =~ m{\$ARGV\[(.*)\]}) {
        return "sys.argv[$1+1]"; # offset by 1 as in py, argv[0] is filename
    }
    # convert index ranges
    if ($var =~ m{\[(.*)\.\.(.*)\]}) {
        $var =~ s{\[.*\]}{\[$1:$2\]};
    # if it is not clear that an index is an integer, try
    # typecasting it
    } elsif ($var =~ m{\[(.*)\]$}) {
        if (infer_type($1) ne _INT) {
            my $replace = "int($1)";
            $var =~ s{\Q$1}{$replace}e;
        }
    }
    # index is the number of the last element, which starts from 0
    # so offset the length by 1 for this number
    if ($var =~ m{^\$#(\w+)}) {
        $var = "len($1)-1";
    }
    # remove whitespace so the addition is not treated
    # as a concatenation
    # E.g. $arr[a + 1] => $arr[a+1]
    $var =~ s{\s}{}g;
    $var =~ tr/{}/[]/;
    return "$var";
}


# ++, --
sub handle_crement {
    my ($var, $crement) = @_;
    my $expr = "$var - 1";
    if ($crement eq "+") {
        $expr = "$var + 1";
    }
    return handle_assignment($var, 0, $expr);
}


# Does some basic type inference and updates
# a hash to track when a var was last assigned
# (for typecasting purposes)
# Also does simple bracket substitutions for
# arrays and hashes
sub handle_assignment {
    my ($var, $op, $val) = @_;
    # Assignments using SHORTHAND math operators
    #   E.g. $var += 5
    if ($op =~ m{([\+\-\*/])=}) {
        $val = "$var $1 $val";
    }
    # for empty declarations
    # E.g. [], ()
    if ($var =~ m{^\$}) {
        $sym_tab{$var} = $val;
        $sym_type_tab{$var} = infer_type($var);
    # Add the correct braces
    # Lists can be assigned to the result of another
    # function or list such as split, so don't replace
    # if this appears to be the case...
    } elsif ($var =~ m{^@} && ($val !~ m{^\@}) && ($val !~ m{split})) {
        $val = "[$val]";
    } elsif ($var =~ m{^%}) {
        $val = "{$val}";
    }
    $last_assignment_tab{$var} = $curr_line_num;
    return "$var = $val";
}


sub handle_range {
    my ($start, $end) = @_;
    # evaluate end+1 if it's only a number, otherwise leave it as a string
    if ($start == 0 && $end =~ m{len\(sys\.argv\)\s*\-\s*1}) {
        $end = "len(sys.argv) - 1";
    } else {
        if ($end =~ m{(-+)?\s*\b(\d+)\b}) {
            my $operator = $1;
            my $num = $2;
            if ($operator && $operator eq "-") {
                $end =~ s{$num}{$num-1}e;
            } else {
                $end =~ s{$num}{$num+1}e;
            }
        } else {
            $end = "$end + 1";
        }
    }

    return "range($start, $end)" ;
}


sub handle_input_loop {
    my ($assn) = @_;
    my @components = split(/\s+/, $assn);
    my $iterator = $components[0];
    my $iterable = $components[2];
    if ($iterable =~ m{\Q$syntax_lookup{"<STDIN>"}}) {
        # since this is already a line by line loop, remove readline()
        $iterable =~ s{\.readline\(\)}{};
    }
    return "for $iterator in $iterable:";
}


sub handle_re {
    my ($var, $op, $re) = @_;
    my $re_str = "$var = re.search(r'$re', $var)";
    if ($re =~ m{s/(.*)/(.*)/}) {
        $re_str = "$var = re.sub(r'$1', '$2', $var)";
    } elsif ($re =~ m{m?/(.*)/}) {
        $re_str = "";
        if ($op eq "!~") {
            $re_str .= "not ";
        }
        $re_str .= "re.match(r'$1', $var)";
    }
    return $re_str;
}


sub handle_truth {
    my ($type, $truth) = @_;
    $type =~ s{elsif}{elif};
    $type =~ s{unless}{if not};
    my @truth_exprs = split(/\s(<=|>=|>|<|==|!=|eq|ne|and|or|\&|\^|\||<<|>>|~)\s/,
       $truth);
    # allow for simple exprs, such as while(1)
    unless (scalar @truth_exprs < 3) {
        my $expr1 = $truth_exprs[0];
        my $expr2 = $truth_exprs[2];
        if ($expr1 =~ m{^(\$\w+)$}) {
            # capture only the variable, i.e. only ($var) + 3
            if (exists $sym_type_tab{$1} && $sym_type_tab{$1} eq _STRING &&
                infer_type($expr2) ne _STRING) {
                cast_assignment($1, _FLOAT);
            }
        }
        if ($expr2 =~ m{^(\$\w+)$}) {
            # capture only the variable, i.e. only ($var) + 3
            if (exists $sym_type_tab{$1} && $sym_type_tab{$1} eq _STRING &&
                infer_type($expr1) ne _STRING) {
                cast_assignment($1, _FLOAT);
            }
        }
        $truth =~ s{\beq\b}{==};
        $truth =~ s{\bne\b}{!=};
    }
    return "$type $truth:";
}


sub handle_truth_op {
    my ($expr1, $op, $expr2) = @_;
    $op =~ s{ne}{!=};
    $op =~ s{eq}{==};
    $op =~ s{&&}{and};
    $op =~ s{\|\|}{or};
    return "$expr1 $op $expr2";
}


sub handle_concat {
    my ($str1, $concat, $str2) = @_;
    if ($concat =~ m{^\.=$}) {
        return handle_assignment($str1, 0, "$str1 + $str2");
    }
    return "$str1 + $str2";
}


sub handle_list_func {
    my ($func_type, $list, $elements) = @_;
    if ($func_type =~ m{^pop}) {
        return "$list.pop()";
    } elsif ($func_type =~ m{^shift}) {
        return "$list.pop(0)";
    } elsif ($func_type =~ m{^unshift}) {
        return "$list.insert(0, $elements)";
    } elsif ($func_type =~ m{^reverse}) {
        return "$list.reverse()";
    }
    # PUSH
    return "$list.append($elements)";
}


sub handle_open {
    my ($fh, $fname) = @_;
    # use only fname from "<fname"
    $fname =~ s{["<]}{}g;
    return "$fh = open(\"$fname\")";
}


# Does basic typecasting by looking back to
# the last assignment of the var
sub cast_assignment {
    my ($var, $typecast) = @_;
    my $assn = $py_code[$last_assignment_tab{$var}];
    my $whitespace = "";
    if ($assn =~ m{^(\s+)}) {
        $whitespace = $1;
    }
    my @components = split(/\s=\s/, $assn);
    chomp $components[1];
    my $cast_value = $components[1];
    # only cast the value if it is ambiguous
    # here we assume that a multi word expression
    # must contains an operator such that it is
    # either clear or the variables involved have
    # already been typecasted previously
    # E.g. These won't be cast:
    #      $var = $a + 10
    #      $var = 10
    unless ($cast_value =~ m{^\S*$}) {
        return;
    }
    # update type for this var
    $sym_type_tab{$var} = $typecast;
    # now add the cast to the existing line and remove the $
    my $var_str = $var;
    $var_str =~ s{\$}{};
    $assn = "$whitespace$var_str = $typecast($components[1])\n";
    $py_code[$last_assignment_tab{$var}] = "$assn";
}


# Import modules and remove @, $, % from vars
sub do_imports_and_clean_vars {
    my ($line) = @_;
    # import any modules used in the line
    # if necessary
    if ($line =~ m{(sys|fileinput|re)\.}) {
        unless (exists $import_tab{$1} && $import_tab{$1} == 1) {
            $import_tab{$1} = 1;
        }
    }
    my @components = split(/(?<=["'])/, $line);
    my $index = 0;
    for my $component (@components) {
        # every second component is a string
        # so only substitute $/@/% if its
        # not a string
        if ($index % 2 == 0) {
            $component =~ s{[\$@]}{}g;
            # don't remove modulo operators
            # E.g. %tab => tab
            #      a % b does not change
            if ($component =~ m{(%\w+)}) {
                $component =~ s{%}{}g;
            }
        }
        $index++;
    }
    $line = join('', @components);
    return $line;
}