%{  my %sym_tab;
    my %sym_type_tab;
    my %imports;
    my %last_assignment;
    my @print_vars;
    my @py_header;
    my @py_code;
    my $curr_line_num = 0; %}
%token NUMBER
%token SHEBANG
%token PRINT
%token END_OF_FILE
%token COMMENT
%token EMPTY_LINE
%token WHITESPACE
%token SEPARATOR
%token IF
%token CHOMP
%token JOIN
%token EXIT
%token CREMENT
%token MATCH_OP
%token MATH_OP
%token BW_BINARY_OP
%token BW_UNARY_OP
%token RANGE


%left MATH_OP
%left BW_BINARY_OP
%left BW_UNARY_OP
%left RANGE

%%

program     : line '\n'
            | line endfile
            | program endfile
            | program line '\n'
            | program line endfile
            ;

endfile     : END_OF_FILE
                {
                    print_py();
                    exit 0;
                }
            ;

line        : statement
                {
                    my $stmt = $_[1];
                    $stmt = do_imports_and_clean_vars($stmt);
                    push @py_code, "$stmt\n";
                    $curr_line_num = scalar @py_code;
                }
            | comment {
                push @py_code, "$_[1]\n";
                $curr_line_num = scalar @py_code;
            }
            | EMPTY_LINE {
                push @py_code, "\n";
                $curr_line_num = scalar @py_code;
            }
            | SHEBANG {
                push @py_header, "#!/usr/local/bin/python3.5 -u\n";
                $curr_line_num = scalar @py_code;
            }
            | UNKNOWN_TOK {
                push @py_code, "# $_[1]\n";
                $curr_line_num = scalar @py_code;
            }
            | no_line #no need to push anything
            ;

statement   : print_st | assignment | condition | loop
            | chomp | string_func | read_op | re_match
            | OPENF SEPARATOR string
                    {
                        return handle_open($_[1], $_[3]);
                    }
            | EXIT { return "sys.exit"; }
            | LAST { return "break"; }
            | NEXT { return "continue"; }
            | WHITESPACE statement { return join('', $_[1], $_[2]); }
            ;

loop        : LOOP_TYPE '(' truth ')' '{' { return handle_truth($_[1], $_[3]); }
            | LOOP_TYPE var '(' expr ')' '{' { return handle_loop($_[2], $_[4]);
            }
            | LOOP_TYPE '(' assignment ')' '{'
                {
                    my $assn = $_[3];
                    return handle_input_loop($assn);
                }
            ;

chomp       : CHOMP
            | CHOMP var { return handle_chomp($_[2]); }
            ;

string_func : JOIN '(' string SEPARATOR value ')'
                {
                    return "$_[3].join($_[5])";
                }
            | JOIN string SEPARATOR array
                {
                    return "$_[2].join($_[4])";
                }
            | JOIN '(' string SEPARATOR array ')'
                {
                    return "$_[3].join($_[5])";
                }
            | SPLIT MATCH SEPARATOR value
                {
                    return "$_[4].split('$_[2]')";
                }
            | SPLIT '(' MATCH SEPARATOR value ')'
                {
                    return "$_[5].split('$_[3]')";
                }
            ;

print_st    : PRINT print_arg
                {
                    my $args = $_[2];
                    return handle_print($args);
                }
            ;

print_arg   : expr
            | print_arg SEPARATOR expr { "$_[1], $_[3]"; }
            ;


string      : EMPTY_STRING
            | SENTENCE
            | value CONCAT value { return handle_concat($_[1], $_
                [2], $_[3]); }
            ;

array       : value { "$_[1]"; }
            | value SEPARATOR { "$_[1]$_[2]"; }
            | array value { "$_[1]$_[2]"; }
            | array value SEPARATOR { "$_[1]$_[2]$_[3]"; }
            ;

expr        : expr MATH_OP expr { "$_[1] $_[2] $_[3]" }
            | expr BW_BINARY_OP expr { "$_[1] $_[2] $_[3]" }
            | BW_UNARY_OP expr
            | expr RANGE expr
                {
                    my $start = $_[1];
                    my $end = $_[3];
                    return handle_range($start, $end);
                }
            | string_func
            | value
            ;

value       : NUMBER
            | string
            | var
            ;

hash_line   : WHITESPACE value SEPARATOR value SEPARATOR '\n' { "$_[2]: $_[4]";}
            | WHITESPACE value '=>' value SEPARATOR '\n' { "$_[2]: $_[4]";}
            ;

hash        : hash_line
            | hash hash_line { "$_[1], $_[2]";}
            ;

assignment  : var '=' expr
                {
                    return handle_assignment($_[1], $_[3]);
                }
            | var '=' input
                {
                    return handle_assignment($_[1], $_[3]);
                }
            | var '=' '(' array ')'
                {
                    return handle_assignment($_[1], $_[4]);
                }
            | var '=' '(' '\n' hash ')'
                {
                    return handle_assignment($_[1], $_[5]);
                }
            | var CONCAT_EQ value { return handle_concat($_[1], $_[2], $_[3]); }
            | var CREMENT
                {
                    return handle_crement($_[1], $_[2]);
                }
            ;

input       : INPUT
                {
                    my $read_op = $_[1];
                    return handle_read_op($read_op);
                }
            ;

condition   : IF '(' truth ')' '{'
                {
                    return handle_truth($_[1], $_[3]);
                }
            | '}' ELSIF '(' truth ')' '{'
                {
                    return handle_truth($_[2], $_[4]);
                }
            | '}' ELSE '{' { "else:"; }
            ;

truth_op    : LOG_OP
            | COMP_OP
            ;

truth       : expr
            | truth truth_op truth
                {
                    return handle_truth_op($_[1], $_[2], $_[3]);
                }
            | '(' truth ')'
                {
                    return "($_[2])";
                }
            | NOT truth { "not $_[2]" }
            ;

regex       : MATCH
            | SUBS
            ;

re_match    : var MATCH_OP regex { return handle_re($_[1], $_[3]); }
            ;

var         : VAR { return handle_var($_[1]); }
            | MY VAR { return handle_var($_[2]); }
            ;

# Lines with little functional effect
comment     : COMMENT
            | WHITESPACE comment { "$_[1]$_[2]"; }
            ;

no_line     : '}'
            | WHITESPACE no_line
            ;

%%

# These subroutines are used to translate each line

use constant {
    _INT => "int",
    _FLOAT => "float",
    _STRING => "str",
};

my %syntax_lookup = (
    "<STDIN>" => "sys.stdin.readline()",
    "<>" => "fileinput.input()",
    "\@ARGV" => "sys.argv[1:]",
    "\$#ARGV" => "len(sys.argv) - 1", # $#ARGV is the last index, len is the
);

sub print_py {
    my @modules;
    foreach my $module (keys %imports ){
        push @modules, $module;
    }
    if (scalar @modules > 0) {
        push (@py_header, (join('', "import ", join(', ', @modules)) . "\n"));
    }
    push my @py_program, (@py_header, @py_code);
    for (@py_program) {
        print "$_";
    }
}

sub handle_print {
    my ($arg) = @_;
    my $has_new_line = 0;

    # remove only trailing new lines
    # i.e. print "Hello\nWorld"; is passable
    if ($arg =~ m{\\n"\s*$}) {
        $has_new_line = 1;
        $arg =~ s{,\s*"\\n"\s*$}{}g; # remove , "\n"
        $arg =~ s{\\n\s*"\s*$}{"}g; # remove  \n in \n"
    }

    # split by CONCATENATE operator
    my @strings = split(/\s+\+\s+/, $arg);
    for my $string (@strings) {
        # simple lone vars
        # E.g. print ($var) ==> print var
        #      print "$var" ==> print var
        if ($string =~ m{^\(?([^"]*)(\[.*\])?\)?$} || $string =~ m{^"?(\$\w+)(\[.*\])?"?$}) {
            my $original_var = $1;
            my $var_replace = handle_var($original_var);
            $string =~ s{$original_var}{$var_replace}e;
            if (exists $sym_type_tab{$original_var} && $sym_type_tab{$original_var} ne _STRING) {
                my $cast_replace = "str($var_replace)";
                $string =~ s{\Q$var_replace}{$cast_replace}e;
            }
            $string =~ s{^"}{}g;
            $string =~ s{"$}{}g;
        # strings with vars and words
        # E.g. print "$num bats"
        } else {
            # iterate and test if this is a string that needs formatting
            # E.g. "Aardvark $b $c Dog\n" => "Aardvark %s %s Dog"
            my @components = split(/\s+/, $string);
            # to store modified components in
            my @new_components = ();
            my @vars;
            foreach my $component (@components) {
                # format any var components
                if ($component =~ m{(\$\{?\w+)\}?}) {
                    my $replace = "%s";
                    if (exists $sym_type_tab{$1}) {
                        my $type = $sym_type_tab{$1};
                        if ($type eq _INT) {
                            $replace = "%d";
                        } elsif ($type eq _FLOAT) {
                            $replace = "%f";
                        }
                    }
                    $component =~ s{\$(\w+)}{$replace}g;
                    push @vars, $1;
                }
            }
            $string = join(' ', @components);
            if (@vars) {
                my @str_format = join(', ', @vars);
                if (scalar @vars > 1) {
                    $string .= " % (@str_format)";
                } else {
                    $string .= " % @str_format";
                }
            }
        }
    }
    $arg = join(' + ', @strings);

    # trim any empty strings
    $arg =~ s{\s*\+\s*""}{}g;
    if ($has_new_line == 0) {
        $arg .= ", end=\"\"";
    }
    $arg .= ", flush=True";
    return "print($arg)";
}

sub infer_type {
    my ($var) = @_;
    if (exists $sym_tab{$var}) {
        # this var is assigned to ANOTHER var, so check that type
        if ($sym_tab{$var} =~ m{(\$\w+)}) {
            if (exists $sym_type_tab{$1}) {
                return $sym_type_tab{$1};
            }
        }
        if ($sym_tab{$var} =~ m{^\d+$}) {
            return _INT;
        } elsif ($sym_tab{$var} =~ m{^\d*\.\d+$}) {
            return _FLOAT;
        }
    } elsif ($var =~ m{^\d+$} || $var =~ m{^\$\#}) {
        return _INT;
    }
    return _STRING;
}

sub handle_read_op {
    my ($read_op) = @_;
    if (exists $syntax_lookup{"<$read_op>"}) {
        return $syntax_lookup{"<$read_op>"};
    }
    return "$read_op";
}

sub handle_chomp {
    my ($var) = @_;
    return "$var = $var.rstrip()";
}

sub handle_loop {
    my ($iterator, $iterable) = @_;
    return "for $iterator in $iterable:";
}

sub handle_var {
    my $var = $_[0];
    for my $pl_syntax (keys %syntax_lookup) {
        return $syntax_lookup{$pl_syntax} if $var =~ m{\Q$pl_syntax};
    }
    if ($var =~ m{\$ARGV\[(.*)\]}) {
        return "sys.argv[$1+1]"; # offset by 1 as in py, argv[0] is filename
    }
    # convert index ranges
    if ($var =~ m{\[(.*)\.\.(.*)\]}) {
        $var =~ s{\[.*\]}{\[$1:$2\]};
    }
    # remove whitespace so the addition is not treated
    # as a concatenation
    # E.g. $arr[a + 1] => $arr[a+1]
    $var =~ s{\s}{}g;
    $var =~ tr{\{\}}{\[\]};
    return "$var";
}

sub handle_crement {
    my ($var, $crement) = @_;
    my $expr = "$var - 1";
    if ($crement eq "+") {
        $expr = "$var + 1";
    }
    return handle_assignment($var, $expr);
}

sub handle_assignment {
    my ($var, $val) = @_;
    if ($var =~ m{^\$}) {
        $sym_tab{$var} = $val;
        $sym_type_tab{$var} = infer_type($var);
    } elsif ($var =~ m{^@}) {
        $val = "[$val]";
    } elsif ($var =~ m{^%}) {
        $val = "{$val}";
    }
    $last_assignment{$var} = $curr_line_num;
    return "$var = $val";
}

sub handle_range {
    my ($start, $end) = @_;
    # evaluate end+1 if it's only a number, otherwise leave it as a string
    if ($start == 0 && $end =~ m{len\(sys\.argv\)\s*\-\s*1}) {
        $end = "len(sys.argv) - 1";
    } else {
        if ($end =~ m{(-+)?\s*\b(\d+)\b}) {
            my $operator = $1;
            my $num = $2;
            if ($operator && $operator eq "-") {
                $end =~ s{$num}{$num-1}e;
            } else {
                $end =~ s{$num}{$num+1}e;
            }
        } else {
            $end = "$end + 1";
        }
    }

    return "range($start, $end)" ;
}

sub handle_input_loop {
    my ($assn) = @_;
    my @components = split(/\s+/, $assn);
    my $iterator = $components[0];
    my $iterable = $components[2];
    if ($iterable =~ m{\Q$syntax_lookup{"<STDIN>"}}) {
        # since this is already a line by line loop, remove readline()
        $iterable =~ s{\.readline\(\)}{};
    }
    return "for $iterator in $iterable:";
}

sub handle_re {
    my ($var, $re) = @_;
    if ($re =~ m{s/(.*)/(.*)/}) {
        return "$var = re.sub(r'$1', '$2', $var)";
    } elsif ($re =~ m{m?/(.*)/}) {
        return "$var = re.match(r'$1', $var)";
    }
    # should never be the case, just a fail safe
    return "$var = re.match(r'$re', $var)";
}

# this assumes read only mode ALWAYS
sub handle_open {
    my ($fh, $fname) = @_;
    # use only fname from "<fname"
    $fname =~ s{["<]}{}g;
    return "$fh = open(\"$fname\")";
}


sub handle_truth {
    my ($type, $truth) = @_;
    $type =~ s{elsif}{elif};
    my @truth_exprs = split(/\s(<=|>=|>|<|==|!=|eq|ne|and|or|\&|\^|\||<<|>>|~)\s/,
       $truth);
    # allow for simple exprs, such as while(1)
    unless (scalar @truth_exprs < 3) {
        my $expr1 = $truth_exprs[0];
        my $expr2 = $truth_exprs[2];
        if ($expr1 =~ m{^(\$\w+)$}) {
            # capture only the variable, i.e. only ($var) + 3
            if (exists $sym_type_tab{$1} && $sym_type_tab{$1} eq _STRING &&
                infer_type($expr2) ne _STRING) {
                cast_assignment($1, _FLOAT);
            }
        }
        if ($expr2 =~ m{^(\$\w+)$}) {
            # capture only the variable, i.e. only ($var) + 3
            if (exists $sym_type_tab{$1} && $sym_type_tab{$1} eq _STRING &&
                infer_type($expr1) ne _STRING) {
                cast_assignment($1, _FLOAT);
            }
        }
        $truth =~ s{\beq\b}{==};
        $truth =~ s{\bne\b}{!=};
    }
    return ("$type $truth:");
}

sub handle_truth_op {
    my ($expr1, $op, $expr2) = @_;
    $op =~ s{ne}{!=};
    $op =~ s{eq}{==};
    $op =~ s{&&}{and};
    $op =~ s{\|\|}{or};
    return "$expr1 $op $expr2";
}

sub handle_concat {
    my ($str1, $concat, $str2) = @_;
    if ($concat =~ m{^\.=$}) {
        return handle_assignment($str1, "$str1 + $str2");
    }
    return "$str1 + $str2";
}


sub cast_assignment {
    my ($var, $typecast) = @_;
    my $assn = $py_code[$last_assignment{$var}];
    my $whitespace = "";
    if ($assn =~ m{^(\s+)}) {
        $whitespace = $1;
    }
    my @components = split(/\s=\s/, $assn);
    chomp $components[1];
    my $cast_value = $components[1];
    # only cast the value if it is ambiguous
    # here we assume that a multi word expression
    # must contains an operator such that it is
    # either clear or the variables involved have
    # already been typecasted previously
    # E.g. These won't be cast:
    #      $var = $a + 10
    #      $var = 10
    unless ($cast_value =~ m{^\S*$}) {
        return;
    }
    # update type for this var
    $sym_type_tab{$var} = $typecast;
    # now add the cast to the existing line and remove the $
    my $var_str = $var;
    $var_str =~ s{\$}{};
    $assn = "$whitespace$var_str = $typecast($components[1])\n";
    $py_code[$last_assignment{$var}] = "$assn";
}

sub do_imports_and_clean_vars {
    my ($line) = @_;
    # import any module return "$var = [$vals]";
    if ($line =~ m{(sys|fileinput|re)\.}) {
        unless (exists $imports{$1} && $imports{$1} == 1) {
            $imports{$1} = 1;
        }
    }
    my @components = split(/(?<=["'])/, $line);
    my $index = 0;
    for my $component (@components) {
        # every second component is a string
        # so only substitute $/@/% if its
        # not a string
        if ($index % 2 == 0) {
            $component =~ s{[\$@]}{}g;
            # don't remove modulo operators
            # E.g. %tab => tab
            #      a % b does not change
            if ($component =~ m{(%\w+)}) {
                $component =~ s{%}{}g;
            }
        }
        $index++;
    }
    $line = join('', @components);
    return $line;
}